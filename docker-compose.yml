services:
  # aphrodite:
  #   image: lexincsui/chat:aphrodite
  #   container_name: aphrodite
  #   restart: always
  #   ports:
  #     - 5000:80
  #   env_file:
  #     - ./aphrodite/.env
  #   depends_on:
  #     - chronos

  # chronos:
  #   image: lexincsui/chat:chronos
  #   container_name: chronos
  #   restart: always
  #   ports:
  #     - 8080:8000
  #   env_file:
  #     - ./chronos/.env
  #   depends_on:
  #     - rabbitmq

  # hermes:
  #   image: lexincsui/chat:hermes
  #   deploy:
  #     replicas: 4
  #     restart_policy:
  #       condition: any
  #   env_file:
  #     - ./hermes/.env
  #   depends_on:
  #     - rabbitmq
  #     - elasticsearch

  rabbitmq:
    image: rabbitmq:4-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    # configs:
    #   - source: rabbitmq-plugins
    #     target: /etc/rabbitmq/enabled_plugins
    volumes:
      - rabbitmq-lib:/var/lib/rabbitmq/
      - rabbitmq-log:/var/log/rabbitmq

  # db:
  #   image: pgvector/pgvector:pg17
  #   container_name: database
  #   restart: always
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:7.8.1
    ports:
      - 9200:9200
    environment:
      discovery.type: 'single-node'
      xpack.security.enabled: 'true'
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ES_JAVA_OPTS: '-Xmx2g -Xms2g'
  kibana:
    container_name: kibana
    image: kibana:7.8.1
    environment:
      - SERVER_HOST=0.0.0.0
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - 5601:5601

# configs:
#   rabbitmq-plugins:
#     content: "[rabbitmq_management]."

volumes:
  rabbitmq-lib:
    driver: local
  rabbitmq-log:
    driver: local
  ollama_volume:
    driver: local
  pgdata:
